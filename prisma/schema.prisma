generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id
  email               String?               @unique
  name                String?
  subscriptionStatus  String                @default("free")
  createdAt           DateTime              @default(now())
  recipes             Recipe[]
  favorites           Favorite[]
  followers           Follow[]              @relation("Following")
  following           Follow[]              @relation("Follower")
  comments            Comment[]
  commentLikes        CommentLike[]
  activities          Activity[]            @relation("ActivityUser")
  activityLikes       ActivityLike[]
  activityComments    ActivityComment[]
  achievements        Achievement[]
  mealPlans          MealPlan[]
  receivedActivities  Activity[]            @relation("TargetUser")
  activityCommentLikes ActivityCommentLike[]
}

model Recipe {
  id            String      @id @default(cuid())
  title         String
  ingredients   String[]
  instructions  String[]
  cookingTime   Int
  imageUrl      String?
  imageUrlLarge String?
  category      String      @default("all")
  tags          String[]    @default([])
  dietaryInfo   Json       @default("{}")
  viewCount     Int        @default(0)
  authorId      String
  author        User        @relation(fields: [authorId], references: [id])
  favorites     Favorite[]
  comments      Comment[]
  activities    Activity[]
  mealPlans     MealPlan[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([authorId])
  @@index([category])
  @@index([createdAt])
  @@index([viewCount])
}

model Activity {
  id              String            @id @default(cuid())
  type            String
  userId          String
  targetUserId    String?
  recipeId        String?
  milestone       Int?
  achievementId   String?
  user            User              @relation("ActivityUser", fields: [userId], references: [id])
  targetUser      User?             @relation("TargetUser", fields: [targetUserId], references: [id])
  recipe          Recipe?           @relation(fields: [recipeId], references: [id])
  likes           ActivityLike[]
  comments        ActivityComment[]
  createdAt       DateTime          @default(now())

  @@index([userId])
  @@index([targetUserId])
  @@index([recipeId])
}

model ActivityLike {
  id         String   @id @default(cuid())
  userId     String
  activityId String
  user       User     @relation(fields: [userId], references: [id])
  activity   Activity @relation(fields: [activityId], references: [id])
  createdAt  DateTime @default(now())

  @@unique([userId, activityId])
  @@index([userId])
  @@index([activityId])
}

model ActivityComment {
  id        String                @id @default(cuid())
  content   String
  userId    String
  activityId String
  user      User                  @relation(fields: [userId], references: [id])
  activity  Activity              @relation(fields: [activityId], references: [id])
  likes     ActivityCommentLike[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  @@index([userId])
  @@index([activityId])
}

model ActivityCommentLike {
  id        String          @id @default(cuid())
  userId    String
  commentId String
  user      User            @relation(fields: [userId], references: [id])
  comment   ActivityComment @relation(fields: [commentId], references: [id])
  createdAt DateTime        @default(now())

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  unlockedAt  DateTime @default(now())

  @@index([userId])
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  recipeId  String
  user      User          @relation(fields: [userId], references: [id])
  recipe    Recipe        @relation(fields: [recipeId], references: [id])
  likes     CommentLike[]

  @@index([userId])
  @@index([recipeId])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model MealPlan {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  recipeId  String
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([recipeId])
}