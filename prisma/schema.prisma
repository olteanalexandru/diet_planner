generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for direct connection to database
  relationMode = "prisma" // Optimized for serverless
}

model User {
  id                   String                @id
  email                String?               @unique
  name                 String?
  bio                  String?
  location             String?
  website              String?
  specialties          String[]
  dietaryPreferences   String[]
  subscriptionStatus   String                @default("free")
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  avatar               String?
  achievements         Achievement[]
  receivedActivities   Activity[]            @relation("TargetUser")
  activities           Activity[]            @relation("ActivityUser")
  activityComments     ActivityComment[]
  activityCommentLikes ActivityCommentLike[]
  activityLikes        ActivityLike[]
  comments             Comment[]
  commentLikes         CommentLike[]
  favorites            Favorite[]
  following            Follow[]              @relation("Follower")
  followers            Follow[]              @relation("Following")
  mealPlans            MealPlan[]
  recipes              Recipe[]
  RecipeLike           RecipeLike[]
}

model Recipe {
  id            String       @id @default(cuid())
  title         String
  description   String?
  ingredients   String[]
  instructions  String[]
  cookingTime   Int
  servings      Int          @default(4)
  difficulty    String       @default("medium")
  category      String       @default("other")
  cuisine       String?
  tags          String[]     @default([])
  dietaryInfo   Json         @default("{}")
  prepTime      Int?
  totalTime     Int?
  calories      Int?
  protein       Float?
  carbs         Float?
  fat           Float?
  rating        Float?
  ratingCount   Int          @default(0)
  imageUrl      String?
  imageUrlLarge String?
  viewCount     Int          @default(0)
  isPublished   Boolean      @default(true)
  authorId      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  status        String       @default("published")
  activities    Activity[]
  comments      Comment[]
  favorites     Favorite[]
  mealPlans     MealPlan[]
  author        User         @relation(fields: [authorId], references: [id])
  likes         RecipeLike[]

  @@index([authorId])
  @@index([category])
  @@index([difficulty])
  @@index([createdAt])
  @@index([viewCount])
  @@index([rating])
  @@index([status])
}

model Activity {
  id            String            @id @default(cuid())
  type          String
  userId        String
  targetUserId  String?
  recipeId      String?
  milestone     Int?
  achievementId String?
  createdAt     DateTime          @default(now())
  recipe        Recipe?           @relation(fields: [recipeId], references: [id])
  targetUser    User?             @relation("TargetUser", fields: [targetUserId], references: [id])
  user          User              @relation("ActivityUser", fields: [userId], references: [id])
  comments      ActivityComment[]
  likes         ActivityLike[]

  @@index([userId])
  @@index([targetUserId])
  @@index([recipeId])
}

model ActivityLike {
  id         String   @id @default(cuid())
  userId     String
  activityId String
  createdAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, activityId])
  @@index([userId])
  @@index([activityId])
}

model ActivityComment {
  id         String                @id @default(cuid())
  content    String
  userId     String
  activityId String
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  activity   Activity              @relation(fields: [activityId], references: [id])
  user       User                  @relation(fields: [userId], references: [id])
  likes      ActivityCommentLike[]

  @@index([userId])
  @@index([activityId])
}

model ActivityCommentLike {
  id        String          @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime        @default(now())
  comment   ActivityComment @relation(fields: [commentId], references: [id])
  user      User            @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String
  userId      String
  unlockedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String
  recipeId  String
  recipe    Recipe        @relation(fields: [recipeId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
  likes     CommentLike[]

  @@index([userId])
  @@index([recipeId])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model MealPlan {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([recipeId])
}

model RecipeLike {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}
