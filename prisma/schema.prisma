// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id
  email              String?       @unique
  name               String?
  subscriptionStatus String        @default("free")
  recipes            Recipe[]
  favorites          Favorite[]
  followers          Follow[]      @relation("Following")
  following          Follow[]      @relation("Follower")
  comments           Comment[]
  commentLikes       CommentLike[]
  activities         Activity[]
  mealPlans          MealPlan[]
  createdAt          DateTime      @default(now())
}

model Recipe {
  id            String     @id
  title         String
  ingredients   String[]
  instructions  String[]
  cookingTime   Int
  imageUrl      String?
  imageUrlLarge String?
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  favorites     Favorite[]
  comments      Comment[]
  activities    Activity[]
  mealPlans     MealPlan[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([authorId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, recipeId])
  @@index([userId])
  @@index([recipeId])
}

model Follow {
  id          String   @id @default(cuid())
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  recipe    Recipe        @relation(fields: [recipeId], references: [id])
  recipeId  String
  likes     CommentLike[]

  @@index([userId])
  @@index([recipeId])
}

model CommentLike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  createdAt DateTime @default(now())

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Activity {
  id           String    @id @default(cuid())
  action       String
  userId       String
  targetUserId String?
  recipeId     String?   // Make recipe optional
  user         User      @relation(fields: [userId], references: [id])
  recipe       Recipe?   @relation(fields: [recipeId], references: [id]) // Make recipe optional
  createdAt    DateTime  @default(now())

  @@index([userId])
  @@index([recipeId])
  @@index([targetUserId])
}


model MealPlan {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  recipeId  String
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([recipeId])
}
